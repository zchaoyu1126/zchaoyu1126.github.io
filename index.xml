<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Chao's Blog</title><link>https://zchaoyu1126.github.io/</link><description>程序猿的学习和日常</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>zchaoyu1126@gmail.com (chao)</managingEditor><webMaster>zchaoyu1126@gmail.com (chao)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 11 Jul 2022 11:25:44 +0800</lastBuildDate><atom:link href="https://zchaoyu1126.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>第六章 多态性与虚函数</title><link>https://zchaoyu1126.github.io/2022/07/cpp-ch6/</link><pubDate>Mon, 11 Jul 2022 11:25:44 +0800</pubDate><author>chao</author><guid>https://zchaoyu1126.github.io/2022/07/cpp-ch6/</guid><description>6.1 类型兼容原则 类型兼容规则是指在需要基类对象的任何地方，都可以使用公有派生类的对象来替代。 主要有以下三种情况：（具体代码参考6.4节） 派生类</description></item><item><title>第五章 继承与派生</title><link>https://zchaoyu1126.github.io/2022/07/cpp-ch5/</link><pubDate>Mon, 11 Jul 2022 11:25:18 +0800</pubDate><author>chao</author><guid>https://zchaoyu1126.github.io/2022/07/cpp-ch5/</guid><description>继承与派生 继承，是两个类之间的关系。派生，是基类创建新类的过程。 继承的传递性将增加类之间的耦合度，应防止滥用继承。 5.1 派生类中的基类成员的访问</description></item><item><title>第四章 运算符重载</title><link>https://zchaoyu1126.github.io/2022/07/cpp-ch4/</link><pubDate>Mon, 11 Jul 2022 11:25:07 +0800</pubDate><author>chao</author><guid>https://zchaoyu1126.github.io/2022/07/cpp-ch4/</guid><description>4.1 友元 友元可以是一个全局函数或另一个类的成员函数，甚至是一个类，分别称为友元函数和友元类。 友元类的所有成员函数都是友元函数，可以访问被访问类</description></item><item><title>第三章 使用类和对象</title><link>https://zchaoyu1126.github.io/2022/07/cpp-ch3/</link><pubDate>Mon, 11 Jul 2022 10:51:33 +0800</pubDate><author>chao</author><guid>https://zchaoyu1126.github.io/2022/07/cpp-ch3/</guid><description>3.1 构造函数和析构函数 调用时机：对象被创建和消亡时分别执行构造函数和析构函数 调用顺序：构造函数与声明对象的顺序相同，析构函数相反 构造函数 如果在</description></item><item><title>第二章 类和对象的特性</title><link>https://zchaoyu1126.github.io/2022/07/cpp-ch2/</link><pubDate>Mon, 11 Jul 2022 10:50:00 +0800</pubDate><author>chao</author><guid>https://zchaoyu1126.github.io/2022/07/cpp-ch2/</guid><description>2.1 C++的特性 C++的三大特性：封装，继承，多态 C++的四大特性：抽象，封装，继承，多态 2.2 类的定义 三种访问权限符：public,privat</description></item><item><title>第一章 概述</title><link>https://zchaoyu1126.github.io/2022/07/cpp-ch1/</link><pubDate>Sun, 10 Jul 2022 23:11:04 +0800</pubDate><author>chao</author><guid>https://zchaoyu1126.github.io/2022/07/cpp-ch1/</guid><description>第一章 概述 1.1 名字空间 C++标准库中的类和函数是在名字空间std中声明的。名字空间可以消除那些因重名而导致的命名冲突 💡允许使用没有名字的名字空</description></item><item><title>Goroutine 泄漏</title><link>https://zchaoyu1126.github.io/2022/07/goroutine-leak/</link><pubDate>Wed, 06 Jul 2022 11:22:43 +0800</pubDate><author>chao</author><guid>https://zchaoyu1126.github.io/2022/07/goroutine-leak/</guid><description>&lt;p>Golang优秀的GC机制，虽然可以让其不需要像C++中那样手动释放对象，从而避免内存泄漏，但goroutine的生命周期需要开发者格外注意。如果一个goroutine意外阻塞无法退出，就会造成goroutine泄漏的问题。随着占用的资源越来越多，只能重启服务器暂时缓解，还是得从根源上解决问题。本文对goroutine的泄漏场景进行了总结，是对煎鱼大佬博文的梳理，内容并非原创，参考原文已贴在末尾。&lt;/p></description></item><item><title>使用Github Action自动部署Hugo</title><link>https://zchaoyu1126.github.io/2022/06/github-action-deploy-hugo/</link><pubDate>Wed, 29 Jun 2022 20:03:12 +0800</pubDate><author>chao</author><guid>https://zchaoyu1126.github.io/2022/06/github-action-deploy-hugo/</guid><description>&lt;p>使用Loveit主题的拓展short codes之后，由于在markdown之中引入了&lt;code>{{}}&lt;/code>语法，使得Liquid在解析markdown中的代码块时出错，采用的解决方法是禁用Jekyll，因为hugo已经生成了静态站点所需的文件，不需要再使用Jekyll。在解决此问题的同时，学习于了解了Github上的Action功能，并使用Github Action完成了站点的自动部署。&lt;/p></description></item><item><title>Go语言学习资料</title><link>https://zchaoyu1126.github.io/2022/06/means/</link><pubDate>Tue, 28 Jun 2022 20:03:12 +0800</pubDate><author>chao</author><guid>https://zchaoyu1126.github.io/2022/06/means/</guid><description>信息 以下1-5为字节青训营白嫖拿到的学习路线图 1 入门 官方课程Go语言圣经(中文版) Go by Example中文 Effective Go中文版本 标准库： Go语言标准库</description></item><item><title>ch4 网络层-IP基础</title><link>https://zchaoyu1126.github.io/2022/05/network-ch4/</link><pubDate>Mon, 30 May 2022 23:02:12 +0800</pubDate><author>chao</author><guid>https://zchaoyu1126.github.io/2022/05/network-ch4/</guid><description>1 IPv4 地址 IPv4地址是一个32bit地址，唯一地与通用地定义了一个连接在因特网上的设备。IP地址采用点分十进制记法，首先每8个Bit插入一个</description></item></channel></rss>